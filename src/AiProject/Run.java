package AiProject;
import java.util.*; 
import java.io.*; 
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;


public class Run extends javax.swing.JFrame {
public static Map<Integer,String>map=new HashMap<Integer,String>();
public static HashMap<Integer,String>mapS=new HashMap<Integer,String>();
public static HashMap<String, Integer> frequencyData = new HashMap<String,Integer>();
public static Map<Integer,String>mat=new HashMap<Integer,String>();
public static Integer g =0;
public static Integer i=0;
public static Integer countAll = 0;
public static class filereader {

private static int getCount(String word)
    {
        if (frequencyData.containsKey(word))
        { 
            return frequencyData.get(word); 
        }
        else
        { 
            return 0;
        }
    }
    public static void readWordFile(String x)
    {
        Scanner wordFile;
        String word;
        Integer count = 0;
        countAll = 0;
        try
        {
            
            wordFile = new Scanner(new FileReader(x));
        }
        catch (FileNotFoundException e)
        {
            System.err.println(e);
            return ;
        }

        while (wordFile.hasNext())
        {
            word = wordFile.next();
            if("is".equals(word) || "am".equals(word) ||"are".equals(word)){
            count = getCount(word) + 1;
            frequencyData.put(word, count);
            }
            countAll = countAll +1 ;

            
        }

    }
    public static  String findLongestWords(String x) throws FileNotFoundException {
       
       String longest_word = "";
       String current;
       Scanner sc = new Scanner(new File( x ));
       while (sc.hasNext()) {
          current = sc.next();
           if (current.length() > longest_word.length()) {
             longest_word = current;
             
           }}
            return longest_word;
    }
    public static  String findshortestWords(String x) throws FileNotFoundException {

       String shortest_word = "";
       String current;
       Scanner sc = new Scanner(new File( x ));
       Scanner sn = new Scanner(new File( x ));
       while(sn.hasNext()){
       if(!"is".equals(sn.next()) &&!"am".equals(sn.next()) && !"are".equals(sn.next())){
       shortest_word = sn.next();
       break;
       }
       
       }
       sc.reset();
       while (sc.hasNext()) {
          current = sc.next();
          if(!"is".equals(current) &&!"am".equals(current) && !"are".equals(current)){
           if (current.length() < shortest_word.length()) {
             shortest_word = current;
             
           }}}
            return shortest_word;
          }

}
    public static class descoverfile implements Runnable {
    String path;
    public descoverfile(String m){
        this.path=m;
    }
    @Override
    public void run() {
        try {
            File file = new File(path);
            String s = "";
            String str = "";
            File[] files = file.listFiles();
            
            for (File sourceFile : files) {
                String fileN = sourceFile.getName();
                s = fileN.substring(fileN.lastIndexOf(".") + 1);
                if (s.equalsIgnoreCase("txt")) {
                    map.put(i, fileN); 
                    mat.put(i, path);
                    i++;
                } 
                fileN = "";
                str = "";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
    public static class discoversubdirs implements Runnable {
    String path;
    public discoversubdirs(String m){
        this.path=m;
    }
    @Override
    public void run() {
        
        try {
            File file = new File(path);
            File[] files = file.listFiles();
            for (File sourceFile : files) {
                String fileN = sourceFile.getName();
                    if(sourceFile.isDirectory()){
                    String k  = path+ "\\" + fileN;
                    mapS.put(g,k);
                    g++;
                    }
            fileN = "";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
    
    public Run() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        checkbox1 = new java.awt.Checkbox();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Enter Path");

        jButton2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jButton2.setText("submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        checkbox1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        checkbox1.setLabel("include subdirectories");
        checkbox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkbox1KeyPressed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jButton3.setText("Browse");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "file name ", "shortest word ", "longest word  ", "number of is ", "number of are  ", "number of am ‚Äè ", "number of words"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

  
     String path = jTextField1.getText();
     descoverfile descoverfile = new descoverfile(path);
     filereader filereader = new filereader();
     discoversubdirs subdirs =new discoversubdirs(path);
     Thread dfile =new Thread(descoverfile);
     dfile.start();
     if(checkbox1.getState()){
     Thread dirs =new Thread(subdirs);
     dirs.start(); 
         try {
             dirs.join();
         } catch (InterruptedException ex) {
             Logger.getLogger(Run.class.getName()).log(Level.SEVERE, null, ex);
         }
     for(Integer word : mapS.keySet()){
     descoverfile descoverfile1 = new descoverfile(mapS.get(word));
     Thread descov =new Thread(descoverfile1);
     descov.start();
     
          try {
             descov.join();
         } catch (InterruptedException ex) {
             Logger.getLogger(Run.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
    

     }
    try {
        dfile.join();
    } catch (InterruptedException ex) {
        Logger.getLogger(Run.class.getName()).log(Level.SEVERE, null, ex);
    }
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    
      for(Integer word : map.keySet()){
       String pth =mat.get(word)+"\\"+map.get(word);
         try {
             filereader.readWordFile(pth);
             Integer am = frequencyData.get("am");
             Integer is = frequencyData.get("is");
             Integer are =frequencyData.get("are");
             frequencyData.clear();
             String LongestWords = filereader.findLongestWords(pth);
             String shortestWords = filereader.findshortestWords(pth);
             model.addRow(new Object[]{map.get(word),shortestWords,LongestWords,is,are,am,countAll});
             
         } catch (FileNotFoundException ex) {
             Logger.getLogger(Run.class.getName()).log(Level.SEVERE, null, ex);
         }
         
    }
    jButton2.setEnabled(false);
     
     
    }//GEN-LAST:event_jButton2ActionPerformed

    private void checkbox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkbox1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkbox1KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      JFileChooser chooser = new JFileChooser();
     chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
     int option = chooser.showOpenDialog(null);
     File file = chooser.getSelectedFile();
     String filename = file.getAbsolutePath();
     jTextField1.setText(filename);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Run().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkbox1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
